/*! --------------------------------
Developed by David Benson
Applied Information Sciences
Oct 21, 2013
---------------------------------*/
//colors
@colors:
        #eddb43, #401a57, #d55428, #a3dae1,
        #b91f36, #c2bc82, #7f8081, #62a647,
        #d386b2, #4578b3, #edc999, #574ea0,
        #e1a131, #9c247f, #dfe67b, #7d1716,
        #a4c43a, #82411d, #c5a1ca, #50662e,
        #bddeae, #263777, #877a30, #345a36,
        #56958c, #d12d27, #1f1e1e, #eeeeee;

// for (i = 1; i < colors.length; i++)
// Since less behaves functionally, loops must be done recursively. This does a recursive loop on the colors.
// .loop() is the function call. when() is equivalent to an if statement.
// Inside the when, loop calls itself with the next iteration. After the function, the loop function is executed.
// Future less versions may make this easier.

.loop(@i: 1) when (@i < 29){ .loop(@i + 1);
  @val: extract(@colors, @i);

  .c@{i} {
    background-color: @val;
    border-color: @val;
    color: mix(contrast(@val, #000, #fff, 60%), @val, 80%);
  }

} .loop();

@theme: #FF8800;
@theme2: #6093bf;
@themeRemove: #aa3344;
@themeSuccess: #33aa44;

@themeText: #888;
@theme2Text: #fff;
@themeShadow: #666;
@darkText: #666;

@themeDarkLink: darken(@theme2, 5%);
//#5384b5; //
@brand-primary: @theme;
@btn-primary-color: #000;
@link-color: #888;
@btnSuccessBackground: @theme;
@successBackground: @theme;
@successText: @themeText;
@btnSuccessBackgroundHighlight: darken(@theme, 5%);
@brand-info: @theme2;
@alert-info-bg: lighten(@theme2, 40%);
@alert-info-border: @theme2;
@alert-info-text: @theme2;
@alert-info-bg: lighten(@theme2, 40%);
@alert-info-border: @theme2;
@alert-info-text: @theme2;
@popover-bg: rgba(0,0,0,.95);
@popover-arrow-color: rgba(0,0,0,.95);

// table hover
@table-bg-hover: lighten(@theme, 30%);